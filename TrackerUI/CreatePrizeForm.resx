<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing"">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEANTIAAAEACACoEAAAFgAAACgAAAA1AAAAZAAAAAEACAAAAAAA8AoAAMMOAADDDgAAAAEAAAAB
        AAD///8A/v7+AP7//gD9/f0A/v3+APz8/AD8+/wA+fn5APj4+AD7+/sA+vr6APv6+wD9/v0A/fz9APT0
        9ADg4OAAnp6eAO3t7QDu7u4Avr6+AOXl5QD6+foAS0tLAAAAAABra2sAoaGhAEBAQAB/f38A9fX1APn4
        +QD39/cAMzMzAAMDAwBZWVkAlZWVAExMTABxcXEA//7/AMDAwABTU1MAVFRUAFZWVgBVVVUAEhISAB4e
        HgBSUlIAYWFhAJGRkQBtbW0AgYGBAIuLiwDPz88A+fr5AEdHRwABAQEAFRUVAEtKSwALCwsARkZGAHl5
        eQBISEgAFBQUADc3NwANDQ0AOjo6ADg4OAA5OTkANjY2AGNjYwCCgoIAampqAEJCQgAODg4AZ2dnAG5u
        bgBRUVEA+vv6ADExMQCZmZkALi4uADw8PABKSkoATk5OAG1sbQD39vcA9vb2AKqqqgAqKioAQUFBAJKS
        kgA0NDQAOzs7AN7d3gCgoKAA6enpALi4uADc3NwAjIyMAD4+PgBFRUUAbGxsAElJSQAdHR0AZWVlAGRk
        ZABgYGAAYmJiAGRjZABjYmMAk5OTAJiYmACDg4MAJSUlAAgICABYWFgADw8PACsrKwAtLS0AKSkpAHJy
        cgB0dHQAdXV1AD8/PwDy8fIA8/LzAPTz9AD29fYA+Pf4AHZ2dgBEREQA9fT1AH19fQDj4+MAn6CfAJ+f
        nwCbm5sAvb29APv8+wCFhYUAQ0NDAMLCwgBvb28AMDAwAAcHBwAMDAwACgoKAAYGBgAhISEA1NTUAOLi
        4gDh4eEAT09PAPHx8QDw7/AA8PDwAOjo6ABOTU4AERERABMTEwB4eHgA1dXVAISEhADS0tIAUFBQABYW
        FgA8OzwAFxcXAAICAgDKysoAVlVWAFNSUwC5ubkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAQEBAQEBAQEBAQEB
        AQEBAQEBAQEBAQEBAQEBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQADBQUFAwUFBQUFBQUFBQUF
        BQUFBQUFBQMAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAQAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AQEDCQoHBwoJBQEDAwULBgUBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQABAQINBwoNAQEB
        AAMBAQEBAwMGBQUDAQEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQACAQECBQoKBQQFBQMF
        BQkKCwUBDAEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAQEBAQQFBgcIBwgIBwkD
        AQEBAQEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEAAAEBAQABAwMDAwMDAwEBAQAA
        AAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQEAAQAAAAAAAAIBAAEAAQEAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEBAQEBAQEBAQABAAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEBAQEBAQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>